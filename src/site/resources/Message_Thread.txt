Yaxiong L.
Hi Octavian,

Here are my answers to your questions:
1. The build-in (system functions) are instance functions from the MbtScriptExecutor class. This is a stateful object that is specific for the current process and must be passed as parameter calling execMScript(). But you can cache the function list for validating the function calls though for performance.

2. Plugin objects are instance object as they are stateful and there could be multiple processes running concurrently each with its own plugin object of the same java plugin class. Some plugin functions are static but most of them are instance methods. But once the server /app starts, the plugin functions will not change, so that's an opportunity to cache the plugin function declarations keyed on plugin ID (even though getPluginID() is not static). Also number of different plugins used could also vary depending of if the license purchased.

3. MSCRIPT_METHOD is an interface that we have been using, so the name must stay exactly as is.

Please be aware that ThreadLocal should be used with caution as a process may spawn multiple threads to call MScript and the expectation is that these spawn threads will need to use the same MbtScriptExecutor (system function objectc) and plugin objects.

Please let me know if it's still not clear to you.

Sincerely,


Yaxiong
Yesterday
8:56 pm
Octav... N.
Hi Yaxiong,

While thinking how to implement the MScript runtime / engine in order to provide for scalability yet cache commonly used objects, I stumbled over these questions:

* the built-in functions / plugins: will they be the same for all scripts? (this is the usual case, i.e. a function library doesn't change much at runtime)
* will the MScript functions (in or out of a plugin) map on (i.e. be implemented by) Java STATIC or INSTANCE methods? I would incline towards static methods since they are easy to call given the fact that one does not need an object instance to call a static method... They are also probably stateless...

The idea is that if the functions are know at program start time, one does not need to provide sysFunc_p and pluginList_p every time a script is checked or executed. One can pass them to the "discovery" mechanism of the MScript "engine" prior to starting to expect calls for parsing or execution...

It's true that if the functions are static Java methods, the plugin ID would also need to be static...

And another question: is the naming convention fixed or can I changed a bit? (e.g., I think renaming MSCRIPT_METHOD to MScriptFunction would be more like "idiomatic Java" since annotations follow the camel case naming convention usually...)

Thanks an regards,
Octavian
Yesterday
6:21 pm
Octav... N.
Hi Yaxiong,

There are currently 5 tests running, in 2 methods in the MScriptParserAutoTest class:

* testStringInterpolatedFunctionCall : separate test method for string interpolation
* testScriptParsing : test method that automatically loads all *.mscript (or *.ms or *.mst) files under the mscript directory (can be found under test/resources project folder) and parses them; there are currently .mscript 4 files that are being parsed: 3 of them with more or less odd / curious syntax combinations and the last one containing the concatenation of all the scripts you added in the initial MScript spec document. In order to add a new test one has only to add a .mscript file in the specified directory and it will automatically be parsed.

Since you were able to build the project and get the test rig running, it means you already generated the Java source code :) Java parser generation in one of the first phases performed by the Maven build when creating the final delivery / .jar file. One can generate the Java files for the parser at any time by running just

mvn generate-sources

instead of

mvn install

You can also make sure previously generated files are deleted by including the "clean" Maven goal:

mvn clean generate-sources

I chose to use Maven since it's almost the de-facto standard in building / managing Java projects and it can also easily / automatically download dependencies such as ANTLR libraries. The trick was to correctly configure it so that it would generate the Java source code for the parser prior to compiling the code, when building the project.

Yes, I will do my best to finish the project in 2 weeks time.

Regards,
Tavi
Nov 24, 2014
10:53 am
Yaxiong L.
Please review these requirement and specification. Let me know if you have any questions.
Task_Requirement.txt
MScript_Execution_Spec.txt
Nov 20, 2014
9:32 pm
Yaxiong L.
Hi Octavian:

I got the GUI app working, but still unsure how to run antlr4 to generate the parser java codes with the eclipse project. Can you provide the instruction to do that? Also did you include all of your junit tests in the project? I didn't see much Junit tests in the project.

I have discussed your proposal with my team, I am still trying to get it approved without going the bidding process. Will let you know. Just to confirm, you will complete the work in 2 weeks starting on the job award date, correct?

Yaxiong
Nov 20, 2014
9:19 pm
Octav... N.
Hey,

I set up the project to use Java 1.7+ and I have a bit of code that uses Java 7 features (mostly reading files) but if you need it, I can convert it to Java 6 straight away.

I've attached the entire project's source code folder as an Eclipse project you can import. Are you sure you're getting the exact same exception?

If you are available on Skype or TeamViewer we could set up a meeting.

/Tavi
mscript-1.0-src-eclipse.zip
Nov 20, 2014
5:41 am
Yaxiong L.
What JDK version are you using?
Nov 19, 2014
9:21 pm
Yaxiong L.
Hi Octavian,

I am still getting the error with your updated project, pointing to antlr 4 jar file is missing in the project.

Could you try to build an eclipse project and test it out?

I will review your proposal with my project team and get back to you.

Thanks.

Yaxiong

Nov 19, 2014
6:23 pm
Octav... N.
Hi Yaxiong,

I've corrected the build-related issues and added remaining unit tests: the problem was that in order for Maven to download the latest version of ANTLR (that we needed, i.e. 4.4), we had to use the "com.tunnelvisionlabs" group Id and not the regular one.

So if you just pull the project again and import it in Eclipse as a Maven project, everything should work just fine.

I will try to implement the new requirements in 2 weeks since they don't seem very difficult. I would require 300 USD. Is that OK with you?

Octavian
Nov 19, 2014
12:05 pm
Yaxiong L.
Forgot to answer your question on execution of mscriptiion, it's just expression, no if, while, etc. the if, then, else and while are handled by our app. You just execute the MScript expression that may contain nested calls. So it should be a simple Java class implementation, I think.

By the way, did you finish the junky tests development?

Yaxiong


> On Nov 17, 2014, at 2:46 PM, Octavian N via Elance <E62236593-WR@workroom.elance.com> wrote:
>
>
>
Nov 18, 2014
1:31 am
Yaxiong L.
Hi Octavian,

I am getting the following error when I tried running mvn generate-source. Is there anything I've missed to install/setup in my Eclipse workspace?

Regarding the add on task, I have some flexibility this time with the scheduling but not a lot. Please give me a proposal that you feel comfortable with good degree of comfidence: cost and time.

Thanks.

Yaxiong


SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBin... for further details.
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building mscript-parser 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[WARNING] The POM for org.antlr:antlr4-maven-plugin:jar:4.4-SNAPSHOT is missing, no dependency information available
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.102s
[INFO] Finished at: Mon Nov 17 23:35:53 CST 2014
[INFO] Final Memory: 6M/122M
[INFO] ------------------------------------------------------------------------
[ERROR] Plugin org.antlr:antlr4-maven-plugin:4.4-SNAPSHOT or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.antlr:antlr4-maven-plugin:jar:4.4-SNAPSHOT: Could not find artifact org.antlr:antlr4-maven-plugin:pom:4.4-SNAPSHOT -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVE...

Nov 18, 2014
12:41 am
Octav... N.
Hey there,

I'm attaching a new README file (Markdown format). You can read it (for your convenience) at https://github.com/octavian-nita/mscript.

I've read the additions -- they look OK but I can't guarantee 2 weeks since I am not working 100% on it. How flexible are you in terms of time?

Also, about the execution of an MScript expression: what should the array contain in the case of a loop? because a loop is not an expression but a statement; likewise for an if statement or an assignment statement or a function that does not return anything?
README.md
Nov 17, 2014
3:44 pm
Yaxiong L.
Attached specification.
additions.txt
Nov 16, 2014
4:50 pm
Yaxiong L.
Hi Octavian,

Please get the doc completed ASAP so that we can move on to the next task.

I have attached the spec for the next task. Please review it and give me a proposal of cost and time. I need this task completed in the next 2 weeks. Let me know if you have any questions.

Thanks.


Yaxiong
Nov 16, 2014
4:48 pm
Octav... N.
Status Report for week of Nov 03, 2014

Hi Yaxiong,

I will put together a small doc / README file.

Yes, I'd be interested in helping you.
Nov 13, 2014
6:10 pm
Yaxiong L.
Status Report for week of Nov 03, 2014

Hi Octavian,

Thank you for completing the parser. I am testing it and so far so good. I do need the documentation instruction that shows me how to take the mscript definition run through antlr to generate the java parser. Could you get that to me soon?

I might need some more help in creating simple java methods to invoke the parser for syntax checking and execute mscript using the parser that you have help created. It should be a fairly small task, let me know if this is of interest to you.

I look forward to hearing from you.

Yaxiong
Nov 13, 2014
2:42 pm
Octav... N.
Well, it does simplify things quite a bit but, at a second, very thorough look, I managed to write the grammar so that it is not very cluttered by keeping comment tokens and it allows comments in most places. I am almost done -- I will post a new version soon.

Also, I will validate break and continue tokens to be allowed only when in loops
Nov 05, 2014
6:30 pm
Yaxiong L.
Hi Octavian,

Let's keep the string interpolation supported as you have suggested. I am fine with keeping the single quote in the parsed tree.

Regarding the comments, we just need to support entire line comment, i.e. no comments mixed within script that you have mentioned.

That is, the comments will be:
// comment on entire line
/*
* comments
*/
/* comment
comment 2
*/

So does that help reduce the complexity? I look forward to your reply.
Nov 04, 2014
6:28 pm
Octav... N.
Hi,


01. I've fixed the else branch of the if statement -- a copy-paste issue, from the if block to the else...


02 & 04 & more are closely related :) So:

Since we initially needed to support string interpolation for function calls (after $) and expressions (between [ and ]), I had to describe / define a string literal with a parser rule rather than with a lexer token (the usual case). This is, apparently, the way other ANTLR-based parsers do it (though I've not found many with this request :) ). Also, when you said you wouldn't require it any more, I was thinking that since it had already been done, we could just as well keep it, as it seemed a nice-to-have feature...

The price of this choice was to keep the quotes around the string parts under the string rule since ANTLR v4+ does NOT allow any more the developer to build the parse tree, but builds one automatically for him and we cannot change that tree (except if, after the parsing phase, we traverse the resulting parse tree and manually build another one, removing or merging unneeded tokens / rules)

However: if we decide NOT to support string interpolation IN ANY FORM, i.e. NO 'xy$f()z' AND NO 'ab[1 + 3]', I can revert and consider a string as a token and try to remove the sub-tokens made up from the quotes. And again, in this case we won't have any sort of string embedding... one would only have to concatenate strings.

Are you OK with this?


03. About keeping the comments: do you really want to keep the comments in the parse tree or just have them available somehow at parse time in order to be processed along with the parse tree?

I am asking because I think this would greatly complicates things: multi-line comments can be spread around and interspersed amongst all sorts of tokens and before and after any statement and the single-line comments could appear at the end of every line as well. That means the rules of the parser grammar would have to take into account this and repeat checks between every token. The parser grammar would become illegible.

Moreover, if we have a statement like:

v = 1 + /* comment */ 3 // uh

part of the generated tree would look like:

asgn
+-- expr
+-- 1
+-- +
+-- comment
+-- expr
+-- 3
+-- comment

This tree would be bigger, harder to traverse and have the useless comment tokens ignored.
Nov 04, 2014
11:06 am
Yaxiong L.
Hi Octavian,

Thanks for fixing the issues and the updated demo.

I have a few issues for you to look into:
1. The simple if /else seems to have problem, maybe you are still working on if/else construct?
if (true) {
v = 2;
}
else {
v = 1;
}

2. Can you remove the single quote from the parsed tree for string parameters as the type of "string" already indicate the elements are text string.
3. I need comments to be preserved and included in the parsed tree in the exact order that they appear in the mscript.
4. We no longer need to support implicit string concatenation, i.e. the following should no longer valid expression:
var1 = 'xyz$getValue('abc')'

The valid expression should be
var1 = 'xyz' + $getValue('abc')

Also the parameters in nested function call should not be quoted, i.e following is not valid:
$getValue ('$getRand('10')')
Instead the following is valid:
$getValue($getRand('10'))

You do not need to fix the ctrl-o/open file issue. I am ok just use copy/paste as long as that works.

I do need the error reporting to be as much user friendly as possible.

Please let me know if you have any questions. When do you think you will have while loop and the rest completed?

Thanks.

Yaxiong
Nov 04, 2014
1:01 am
Octav... N.
Hey there,

Thanks for the encouragements! My answers below/inline :)

01. $isPresent('US\$test(where \$test is not a function call)')
can "US\$test(where \$test is not a function call)" be a single string and not be broken down into pieces?

A.: Done. Indeed, it is much cleaner to organize the string literal like that -- thanks for the nice catch! I had initially separated the escape sequences and regular chars while thinking on how to implement the interpolation of function calls and expressions but they are not related anyway ...


02. $web._nativeFunc1('abc')
"_" is replaced by a space char. Please keep "_" in the parsed function name

A.: that was a displaying / font issues :) The function name retains all characters, I have adjusted the font of the tree to properly display such names.

03. comments seem to be stripped off: /* xxx */ and //

A.: Yes, they are. They are usually ignored by parsers and other tools eventually extract them, if needed. However, I can keep them in the parse tree if you wanted to...

04. allow empty block for "if"

A.: Done.

05. while seems not defined, e.g. following gives error:

while (var1 != 'xyz') {
$web.click('f2')
}

A.: Yes, I am still working on it. (I had mentioned it amongst the last lines of my previous description). The loop options are not obvious to get right but not impossible either.

06. Also a line with just static text should be considered error, e.g.
'abc'
abc
123

A.: But it is, isn't it? Indeed, if I enter the 3 lines above one after the other in the source code, I only get one error reported, that is, for the first line; apparently ANTLR cannot recover well in this situation. What behaviour would you have in mind?

I've also noticed that there's a problem when loading files with Ctrl+O: many errors are duplicated and parsing does not really work but if you copy + paste the code, it works just fine. It is obviously a limitation if the small test app which I will probably fix but after implementing WHILE.

One more thing about error reporting: in general, creating good / eloquent error messages for a parser is not obvious. By default, ANTLR-generated parsers report in terms of what's expected as input since they don't really know about the context of a token.

I've attached a new build (as usual, the sources are also available at https://github.com/octavian-nita/mscript ).
Oct 31, 2014
11:01 am
Yaxiong L.
Hi Octavian,

Thanks for the test app, that is nice. I played with it with a few mscript variations and found a few issues for you to look into:

1. $isPresent('US\$test(where \$test is not a function call)')
    can "US\$test(where \$test is not a function call)" be a single string and not be broken down into pieces?
2. $web._nativeFunc1('abc')
    "_" is replaced by a space char. Please keep "_" in the parsed function name
3. comments seem to be stripped off: /* xxx */ and //
4. allow empty block for "if"
5. while seems not defined, e.g. following gives error:
while (var1 != 'xyz') {
    $web.click('f2')
}
6. Also a line with just static text should be considered error, e.g.
'abc'
abc
123

I look forward to the updates.

Yaxiong
Oct 31, 2014
12:17 am
Octav... N.
Hi Yaxiong,

I've attached (archived) the entire project folder, including a build of the current sources in a small app that you can use in order to test the parser. You need only have Java (at least 7) installed and the PATH environment set and you are good to go.

TO TEST:

01. unzip the mscript-parser.zip archive to a location of your choosing; it already contains a folder named mscript

02. navigate to mscript/target directory and double click on the mscript-parser-jar-with-dependencies.jar; a small (but resizable) window should open with 3 sections

03. one can adjust the size of each of the 3 sections using the sliders / dividers in-between them;

03. in the MScript section, one can input MScript code; upon editing, the code is parsed and any eventual parse / syntax errors appear in the list in the section below the code; one can also click a particular error message and the cursor is placed in the source code, at the offending token

04. also upon editing, the section Parse Tree will display a representation of the current parse tree that is automatically built by ANTLR; this way, one can check that the generated tree respects the logical structure of the language

05. by pressing Ctrl + O anywhere in the window, one can open an existing MScript file; upon opening, the file will be parsed; there is no save feature and nothing will be overwritten if the loaded code is edited

AVAILABLE MSCRIPT FEATURES:

01. the available functions are the ones provided by you in the test file; I've also added 3 more to be able to quickly test expressions, etc.:

# Simple function names for tests and quick examples:
f=0,3
g=0,2
h=0,1

02. the only unsupported statement is the WHILE statement, which I am currently implementing!

Let me know how it goes!
Tavi
mscript-parser.zip
Oct 30, 2014
11:58 am
Yaxiong L.
That will be great. I'll look forward to it.

Yaxiong

> On Oct 27, 2014, at 1:48 PM, Octavian N via Elance <E62236593-WR@workroom.elance.com> wrote:
>
>
>
Oct 27, 2014
2:50 pm
Octav... N.
Hello,

I will create a small app tonight that uses the parser (one would also see how to call the parser from outside the unit tests) and renders the resulting abstract tree or lists errors in case of any. Would that be OK?
Oct 27, 2014
2:48 pm
Yaxiong L.
Hi Octavian,

I see that you have completed 90%, that's great. Is there any way that I can try it just to review what you have accomplished and find any issues earlier if any?

Thanks,

Yaxiong
Oct 26, 2014
11:13 pm
Yaxiong L.
Thanks for the follow up. You are correct that we will still need to allow quoted literal string. If you can make it to support both, that will be fine.

Thanks,

Yaxiong

> On Oct 15, 2014, at 3:01 PM, Octavian N via Elance <E62236593-WR@workroom.elance.com> wrote:
>
>
>
Oct 15, 2014
4:32 pm
Octav... N.
Wait... at a second thought...

Why should we not allow quotes around arguments? I mean, we can certainly call functions that take strings as arguments and we delimit strings with quotes, so...

$f('str')

is quite valid. But if the string is actually an interpolated one... instead of simply str, we can have:

$f('Hello $name()')

And now, imagine one would like to print an arithmetic expression at the output (whatever that may be):

$print('a + b equals c')

That's also correctly parsed by the grammar we have so far and is correct from my point of view at least...
Oct 15, 2014
4:00 pm
Octav... N.
Ah! :)

What I had understood was to keep expressions as well as quoted arguments. And in that case, I think my 2 examples would have been correct, since quoting the arg meant creating a string (even an interpolated one :) ).

But no matter. As it is, the parser accepts (AND creates correct parse trees for) both of your examples. Moreover, not supporting quoted params will probably simplify the grammar.

So... since we support parameters as expressions... you mean you don't need string interpolation at all? I.e. no expressions of the sort "ab[v1]d"? If YES, do we keep calling / embedding functions in strings, like '$f(v + '3', 'qw')'?
Oct 15, 2014
5:13 am
Yaxiong L.
Hi Octavian,

Thanks for the updates.

The case you have illustrated would be considered a syntax error as it's missing the matching left paranthesis (the one you just took out). Is this syntax error hard to catch?

I noticed in your example you have parameters enclosed in quotes. I have recently changed not to require quotes on parameters that consist of expressions (see my previous email), so in the example you have given, it should be:

$f($g(3 * ($l.h()) * (2 + 1))-'aa' )

Can the parser handle this?

Regarding the var notation, [varname] can not contain expression, i.e. what's inside [] is considered a variable name, unless [ and ] are escaped with "\", e.g. "\[text\]"

We also need to make sure the expression can handle variable name, e.g. $f(var1 + 'test' + $l.g(3))

If we can support the above, then we don't need to support [varname] notation.

Thanks.

Yaxiong


Oct 15, 2014
12:29 am
Octav... N.
Hi Yaxiong,

I've filed a new status report, as you might have seen already. As described, things look quite good now :) (after quite a bit of struggling and worrying since the language grammar is not trivial :) )

One more question: when interpolating variables using the "[v1]" syntax, do we also allow for things like "[v1 + 3]", i.e. expressions?

And a case I found interesting: the following expression, described in the status report:

$f( '$g('3' * ($l.h()) * (2 + 1))-aa' )

is obviously correct; the argument passed to $g is computed by multiplying 3 expressions.

But if we (mistakenly, maybe :) ) delete the ONLY the parentheses to the left of $l.h, we also get a correct expression:

$f( '$g('3' * $l.h()) * (2 + 1))-aa' )

But in this case, $g is passed the multiplication of 2 values and the rest of the characters after the right parentheses closing the call to $g ( i.e. * (2 + 1))-aa ) become merely a part of the resulting string!!! Can you spot it?

It is not something wrong with the parser OR the definition of the language. It is just a situation you might want to know about :)

Oct 14, 2014
11:30 am
Yaxiong L.
Yes, the list of functions will be provided in a property file or array parameter at time of calling the parser. The list of functions will be dynamically determined based on what plugins users have chosen at that time.

01) the answer is yes. This is to avoid nested quotes which would be much harder to parse and confusing to the users too. So we still require nested function calls like:
$web.click($getData('ds1',$getAttr('f3','Val')))

02) the addition would be string concatenation or math add depending the types of values. Again, the parser do not need to enforce the compatibility of values.

Yaxiong
Oct 03, 2014
10:41 am
Octav... N.
About the functions -- what I wanted to ask actually is do we need to check against the defined function names (in the .properties file ) at parse time? It's not a big deal but in my experience the check is done after parsing, to see whether or not the call makes sense.

About the expressions:

01. just to clear on this: do we allow expressions like a + 10 as function arguments? I think the previous answer was no, we only allow quoted expressions, like strings and strings interpolated with function calls but just to make sure, I am asking again

02. even though it does not matter much from the parsing perspective, in the following line: var1=$setValue('f1',$rand(5)) + '-OK string' -- the addition meas what? concatenation or addition? I mean, it's obvious it cannot be addition but then, if it is concatenation, 1 + '3' should be concatenation as well, right? :)
Oct 03, 2014
5:46 am
Yaxiong L.
Hi Octavian,

That's fine with me. It looks like you are making progress which is good.

Your assumptions are correct.

Regarding if to allow expression 1 + '3', it's not ideal but you don't need to enforce/check as long as 1 and 3 are parsed out as separate elements that my java code can access.

Not sure what you mean by library functions. We do have function calls and the name of the function names need to be checked against list of function definitions (plugin name, function name, and min/max # of parameters). But if you mean calls to some java library functions, then the answer is no.

Thanks for bringing up the acceptance testing/criteria, I was hoping that the example scripts I have attached earlier would serve as minimum set of test cases. Obviously things change and so please make appropriate adjustment or add additional test cases as we go.

I have been thinking a lot about your question on arithmetic operations, I know I have told you no need to support that, I have a second thought about that. I would like to see the support of arithmetic operations in the expression. I have listed a few expressions that we need to support/allow:

var1='xyz'
var1=1
var1=var2 + 'xyz'
var1=$web.getAttr('f1','name')
var1=var2 + 'xyz'
var1=$setValue('f1',$rand(5)) + '-OK string'
if (var1==var2)
if (var1=='xyz')
if ($getAttr('f2','val') > var2)
if ($web.isPresent('f2'))
var2 = $isPresent('f2')
var2 = $web.getValue('f3','val') + 30


Please let me know if you have any questions regarding this change.

Yaxiong

Oct 02, 2014
7:20 pm
Octav... N.
Hey there!

I've failed my first status report, I hope it's OK with you.

There are a few new questions I need to ask on the grammar (they come up while development):

- is the language case sensitive? assumed: YES;
- how about literals like True / tRUe? assumed: YES, i.e. case-sensitive, and the only valid boolean literals being true and false (i.e. lower-case); then again, what about the internal conversions for strings like 'TrUE'? (even though we are not yet concerned with that since it's not about parsing but about semantics)
- do we allow empty scripts as input? assumed: YES
- do we allow empty statements like ; ? assumed: YES
- do we allow string interpolation for variables? assumed (from the examples): '[varName]' (i.e. the [] operator)
- can we have expressions like: var1 = 1 + '3' ??? i.e. can we mix value types? should be reasonable since in the end we only have strings...
- no library function checking at parse time, right?

And also -- we need to discuss about "acceptance testing": how do you want to test the parser so that you can say whether you are satisfied or not?

Regards,
Octavian
Oct 02, 2014
8:17 am
Elance
Congratulations on beginning your job together!

To help you achieve the best outcome, make sure you both have payment protection, via Elance's free Escrow Protection. Simply work and pay safely using project milestones and Elance Escrow. Learn more here.

Contact us anytime if you have questions about your job.

Have a great project.
Sep 24, 2014
11:48 am
Octav... N.
Hey there!

Thanks for accepting my bid.

I've set up a github project at: http://github.com/octavian-nita/mscript where you can easily check the code and progress. Currently, the project has public access, as soon as we finish, I will remove the repository.

Will keep you posted.
Regards, Tavi
Sep 23, 2014
2:22 pm
Octav... N.
Hi,

OK, I think I am good now, we can follow along all the specification, nothing should be skipped. Moreover, apparently the most recent version of ANTLR allows for most recursive rules to be naturally specified.

As specified in the proposal, I require $400 and estimate to finish in one month.

Please let me know if you are OK as I am pretty flexible myself.

Regards,
Octavian
Sep 19, 2014
8:39 am
Yaxiong L.
You are correct, no arithmetic operation is expected. But the expression must allow nested function calls.

One thing that we haven't discussed is how the resulted parser will need to be called directly from a java application and the syntax error must be passed back to the calling app and the parser tree will be traversed in the java app. Please make sure the solution you will develop allows this with relevant documentation.

Please give me an overall assessment if you feel comfortable with the specification and the updates that we have discussed.

Yaxiong

> On Sep 18, 2014, at 11:10 AM, Octavian N via Elance <E62236593-WR@workroom.elance.com> wrote:
>
>
>
Sep 18, 2014
12:52 pm
Octav... N.
Thanks.

One more question, just to be sure: an expression can only be a string literal or function call or concatenation of the two, right?

I mean, we don't allow things as:

if ( '$foo(20 + var1)' ) { ... }

i.e. arithmetic expression passed as argument to a function, right?

( Sorry for so many questions but even for the simplest languages there can be quite a few possibilities, at least in my experience. I might have more questions on the way as I figure out new cases... )
Sep 18, 2014
12:06 pm
Yaxiong L.
The data types are dynamically converted before the comparison by the system. So, true and 'true' are the same, 10 and '10' are the same too. Internally all variables are stored as string regardless of the value they are assigned.

Hope I have answered your question.

Yaxiong

> On Sep 17, 2014, at 6:25 PM, Octavian N via Elance <E62236593-WR@workroom.elance.com> wrote:
>
>
>
Sep 17, 2014
7:39 pm
Octav... N.
I am glad I asked that question... because now I realise I may have not fully understood:

When one writes:

var1 = 'true' // is var1 a boolean or a string? I would assume a string since otherwise, how could I create a string
// literal containing the word <<true>>?

However, in examples like:

if ('true') {
...
}

it seems to me that the 'true' literal is a boolean...

Also, if we were to compare 2 strings in a so-called "boolean context" (if/while condition) we would be forced to write:

while ("true" == 'foo("another_string_literal")') { ... }

Right?
Sep 17, 2014
7:24 pm
Yaxiong L.
Hi Octavian,

Thank you for the feedback and suggestions. Please see my answer inline below.

Yaxiong

========
...
Available data types:
- Boolean: represented by true and false literals
answer: yes

- String : delimited by single quotes; if we want to escape a quote, we use \, like in \'
Question: how do we allow the character \ itself? I would suggest like that: '\\'
Question: do we allow any other so-called escape sequences, like \r, \n etc.?
answer: yes, \n, \t, \\
Question: do we allow multi-line strings?
answer: not necessary, but if it's easy to implement I like to allow multi-line string.
Question: do we also have a concatenation operator for strings, like + or . ? I am assuming not...
answer: no, strings are implicitly concatenated in MScript Expression.
- Integers & Floating-point numbers
answer: yes
Question: do we allow negative and positive numeric literals? like +3 and -5.7? (I am assuming yes)
answer: yes, but "+" should be removed, i.e +3 would be 3.
Question: do we support scientific notation, like 0.3E-10?
answer: no
Question: do we support arithmetic operators like +, -, *, /, %, etc.?
answer: yes
- Additional questions on data types:
01. do we allow conversion between types? like non-0 numbers representing true and 0 or 0.0 representing false? Or, what happens when we try to compare 2 variables or values or function calls that have different types?
answer: no data type check necessary. This check is done during execution.

Also, looking at your example, I deduce that the language isno dynamically-typed, meaning a variable could be assigned a value of one type now and later, assigned a different value of a different type -- is this correct?
answer: yes, that's correct.

What happens if we use a variable that hasn't yet been assigned to? ...
answer: variables are required to be assigned before it's value can be retrieved. But no check is required during parsing for now.

Do we allow an instruction to spread on several lines?...
answer: a statement must be on the same line for now. "if () {" is preferred, but
if ()
{
}
would be a legal syntax. However if this adds a lot of effort/complexity, then we can go with "if (){" on the same line only.

And one of the most interesting points: I understand that whenever one uses expressions, s/he should enclose those expressions in single quotes, similar to string literals... May I ask why? ...
answer: great question. Let's me make sure we are on the same page:
if ($getValue('var1')) {
and
if ($getValue('$getValue('var1')')) {
and
if ('$getValue('var1')) {
all 3 styles are legal.

Are you referring to the last syntax which the function call is enclosed with single quotes?
The reason is for backward compatibility. But I am ok not to support last syntax if it removes significant complexity from the solution.
Please make sure the following are supported:
if ('$getValue('var1')-xyz' == '$getValue('var2')) {
that is, it tests if var1 concatenated with "-xyz" literal is the same as value of var2.
Would the above syntax cause problem?
Sep 17, 2014
12:51 am
Octav... N.
Hey there!

Thanks for replying back. Indeed, the updated specs and test scripts clear things quite a bit!

Some assumptions / notes I'm making and additional questions, just so we can start on the right track; please correct / modify where you don't agree:

Available data types:
- Boolean: represented by true and false literals
- String : delimited by single quotes; if we want to escape a quote, we use \, like in \'
Question: how do we allow the character \ itself? I would suggest like that: '\\'
Question: do we allow any other so-called escape sequences, like \r, \n etc.?
Question: do we allow multi-line strings?
Question: do we also have a concatenation operator for strings, like + or . ? I am assuming not...
- Integers & Floating-point numbers
Question: do we allow negative and positive numeric literals? like +3 and -5.7? (I am assuming yes)
Question: do we support scientific notation, like 0.3E-10?
Question: do we support arithmetic operators like +, -, *, /, %, etc.?
- Additional questions on data types:
01. do we allow conversion between types? like non-0 numbers representing true and 0 or 0.0 representing false? Or, what happens when we try to compare 2 variables or values or function calls that have different types?

Also, looking at your example, I deduce that the language is dynamically-typed, meaning a variable could be assigned a value of one type now and later, assigned a different value of a different type -- is this correct?

What happens if we use a variable that hasn't yet been assigned to? My first assumption would be that we should throw an error, but this check must be done during semantic analysis, i.e. when 'tree parsing' the resulting tree of the syntax parsing. Do we allow a concept like null / undefined?

Do we allow an instruction to spread on several lines? Because if we do, then we need a way to escape the end of the line (like Python does it with \ at the end on a line) so that we know to continue reading input past the EOL... Also, do we allow something like if () { ... } on the same line and something like
if ()
{
}
, i.e. statements being freely formatted or we require something like Go does: i.e. always format an if statement with the brace on the same line as the if?

And one of the most interesting points: I understand that whenever one uses expressions, s/he should enclose those expressions in single quotes, similar to string literals... May I ask why? I am asking because this decision greatly increases the complexity of the grammar and in consequence, the complexity and inefficiency of the generated parser, and for no apparent advantage (not to me, at least, but you might know better). For example, let's say we want to write something like if ( 'expr' ) { echo("True") } where expr is actually a function call (let it be named is_true, for the sake of the example) that takes a parameter ; but arguments passed to functions need to be enclosed in single quotes, so we end up with if ( '$is_true('arg')' ) {}

But an argument can also be an expression; let's say in our case is a string comparison expression and let's try to elaborate a small program:

str = 'antlr' // define a variable
if ( '$is_true('str == 'antlr")' ) {
$do_something();
}
Now, apart from the fact that it's not very readable, the parser need to read much more from the input string in order to take a decision. Moreover, when writing the grammar we might get recursivity issues.

Now, if you're really keen on this syntax, it is do-able, no question about it (we can use counters and decide we have a full expression when the counter is reset to 0, use parser states, etc.) but I was just wondering whether it's a good idea to keep quotes around expressions in general and function arguments in particular...

Looking forward to hearing from you.

Regards, Octavian
Sep 16, 2014
11:46 am
Yaxiong L.
Hi,

Thank you for the proposal and suggestions. I have updated the spec and added test script and a file to list the functions. Please review the changes and update your proposal accordingly.

Yaxiong
Sep 16, 2014
2:21 am
All times are in EST (UTC-05:00)
